// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ReportsOperations operations.
    /// </summary>
    public partial interface IReportsOperations
    {
        /// <summary>
        /// Returns a list of reports from **My workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// This API also returns shared reports and reports from shared apps.
        /// Reports that reside in shared workspaces can be accessed using the
        /// [Get Reports In Group
        /// API](/rest/api/power-bi/reports/get-reports-in-group).
        ///
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID
        /// value in the API response for paginated reports isn't displayed.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Reports>> GetReportsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the specified report from **My workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Report>> GetReportWithHttpMessagesAsync(System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes the specified report from **My workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteReportWithHttpMessagesAsync(System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clones the specified report from **My workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// - If the dataset for a cloned report resides in two different
        /// workspaces or in **My workspace**, then a shared dataset will be
        /// created in the report's workspace.
        /// - When cloned, reports with a [live
        /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose
        /// that connection and instead have a direct binding to the target
        /// dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following, unless a requirement
        /// doesn't apply:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset, required if the
        /// `targetModelId` parameter is used.
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// Clone report parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Report>> CloneReportWithHttpMessagesAsync(System.Guid reportId, CloneReportRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Exports the specified report from **My workspace** to a Power BI
        /// .pbix or .rdl file.
        /// </summary>
        /// <remarks>
        ///
        /// - For .pbix reports -
        /// As a
        /// [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis)
        /// for timeout issues, set the `preferClientRouting` URL query
        /// parameter to `true`.
        /// - Large files are downloaded to a temporary blob. Their URL is
        /// returned in the response, and stored in the locally downloaded
        /// Power BI .pbix file.
        /// - For more information on requirements and limitations, see
        /// [Download a report from the Power BI service to Power BI
        /// Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        /// See [Export Power BI
        /// Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1)
        /// Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For .pbix report, after calling [Rebind
        /// Report](/rest/api/power-bi/reports/rebind-report), export of a
        /// report with a [Power BI service live
        /// connection](/power-bi/desktop-report-lifecycle-datasets) isn't
        /// supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Stream>> ExportReportWithHttpMessagesAsync(System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates the content of the specified report from **My workspace**
        /// with the content of a specified source report.
        /// </summary>
        /// <remarks>
        ///
        /// Specify the source report in the request body.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// UpdateReportContent parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Report>> UpdateReportContentWithHttpMessagesAsync(System.Guid reportId, UpdateReportContentRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Rebinds the specified report from **My workspace** to the specified
        /// dataset.
        /// </summary>
        /// <remarks>
        ///
        /// - If the specified dataset resides in a different workspace than
        /// the report, then a shared dataset will be created in **My
        /// workspace**.
        /// - On rebind, reports with a [live
        /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose
        /// that connection and instead have a direct binding to the target
        /// dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// Rebind report parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> RebindReportWithHttpMessagesAsync(System.Guid reportId, RebindReportRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of pages within the specified report from **My
        /// workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Pages>> GetPagesWithHttpMessagesAsync(System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the specified page within the specified report from **My
        /// workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='pageName'>
        /// The page name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Page>> GetPageWithHttpMessagesAsync(System.Guid reportId, string pageName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of data sources for the specified paginated report
        /// (RDL) from **My workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Datasources>> GetDatasourcesWithHttpMessagesAsync(System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates the data sources of the specified paginated report (RDL)
        /// from **My workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must
        /// have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// The user must be the data source owner.
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='updateRdlDatasourcesRequest'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateDatasourcesWithHttpMessagesAsync(System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Exports the specified report from **My workspace** to the requested
        /// [file
        /// format](/rest/api/power-bi/reports/export-to-file#fileformat).
        /// </summary>
        /// <remarks>
        ///
        /// The API is asynchronous. When the API is called, it triggers an
        /// export job. After triggering an export job, use
        /// [GetExportToFileStatus
        /// API](/rest/api/power-bi/reports/get-export-to-file-status) to track
        /// the job status.
        /// Read more about the entire flow: [Export Power BI
        /// reports](/power-bi/developer/embedded/export-to) and [Export
        /// Paginated
        /// reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to
        /// file](/power-bi/developer/embedded/export-to#considerations-and-limitations)
        /// and [Export paginated report to
        /// file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// Export to file request parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Export>> ExportToFileWithHttpMessagesAsync(System.Guid reportId, ExportReportRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the current status of the [Export to
        /// File](/rest/api/power-bi/reports/export-to-file) job for the
        /// specified report from **My workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// When the export job status is 'Succeeded' use the
        /// [GetFileOfExportToFile
        /// API](/rest/api/power-bi/reports/get-file-of-export-to-file) to
        /// retrieve the file.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='exportId'>
        /// The export ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Export>> GetExportToFileStatusWithHttpMessagesAsync(System.Guid reportId, string exportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the file from the [Export to
        /// File](/rest/api/power-bi/reports/export-to-file) job for the
        /// specified report from **My workspace**.
        /// </summary>
        /// <remarks>
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='exportId'>
        /// The export ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Stream>> GetFileOfExportToFileWithHttpMessagesAsync(System.Guid reportId, string exportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Binds the specified data source of the paginated report from **My
        /// workspace** to the specified gateway, optionally with a given data
        /// source ID. If you don't supply a specific data source ID, the data
        /// source will be bound to the first matching data source in the
        /// gateway.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Only supports on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='rdlBindToGatewayRequest'>
        /// The bind to gateway request payload.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> BindToGatewayWithHttpMessagesAsync(System.Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of reports from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID
        /// value in the API response for paginated reports isn't displayed.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Reports>> GetReportsInGroupWithHttpMessagesAsync(System.Guid groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the specified report from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Report>> GetReportInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes the specified report from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteReportInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clones the specified report from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// - If the dataset for a cloned report resides in two different
        /// workspaces or in **My workspace**, then a shared dataset will be
        /// created in the report's workspace.
        /// - When cloned, reports with a [live
        /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose
        /// that connection and instead have a direct binding to the target
        /// dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following, unless a requirement
        /// doesn't apply:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset, required if the
        /// `targetModelId` parameter is used.
        ///
        /// - This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// Clone report parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Report>> CloneReportInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, CloneReportRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Exports the specified report from the specified workspace to a
        /// Power BI .pbix or .rdl file.
        /// </summary>
        /// <remarks>
        ///
        /// - For .pbix reports -
        /// You can set the `preferClientRouting` URL query parameter to `true`
        /// as a
        /// [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis)
        /// for timeout issues.
        /// - Large files are downloaded to a temporary blob. Their URL is
        /// returned in the response and stored in the locally downloaded Power
        /// BI .pbix file.
        /// - For more information on requirements and limitations, see
        /// [Download a report from the Power BI service to Power BI
        /// Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        /// See [Export Power BI
        /// Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1)
        /// Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// * For .pbix reports, exporting a report is subject to the same
        /// limitation as [downloading a report .pbix
        /// file](/power-bi/create-reports/service-export-to-pbix#limitations-when-downloading-a-report-pbix-file).
        ///
        /// * After calling [Rebind
        /// Report](/rest/api/power-bi/reports/rebind-report), exporting a
        /// report with a [Power BI service live
        /// connection](/power-bi/connect-data/desktop-report-lifecycle-datasets)
        /// isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Stream>> ExportReportInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates the content of the specified report from the specified
        /// workspace with the content of a specified source report.
        /// </summary>
        /// <remarks>
        ///
        /// Specify the source report in the request body.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// UpdateReportContent parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Report>> UpdateReportContentInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, UpdateReportContentRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Rebinds the specified report from the specified workspace to the
        /// specified dataset.
        /// </summary>
        /// <remarks>
        ///
        /// - If the specified dataset resides in a different workspace than
        /// the report or in **My workspace**, then a shared dataset will be
        /// created in the report's workspace.
        /// - On rebind, reports with a [live
        /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose
        /// that connection and instead have a direct binding to the target
        /// dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset.
        ///
        /// - This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Paginated reports are not supported.&lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// Rebind report parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> RebindReportInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, RebindReportRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of pages within the specified report from the
        /// specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Pages>> GetPagesInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the specified page within the specified report from the
        /// specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='pageName'>
        /// The page name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Page>> GetPageInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, string pageName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of data sources for the specified paginated report
        /// (RDL) from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Datasources>> GetDatasourcesInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates the data sources of the specified paginated report (RDL)
        /// from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must
        /// have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// - The user must be the data source owner.
        /// - This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='updateRdlDatasourcesRequest'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateDatasourcesInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Exports the specified report from the specified workspace to the
        /// requested [file
        /// format](/rest/api/power-bi/reports/export-to-file-in-group#fileformat).
        /// </summary>
        /// <remarks>
        ///
        /// The API is asynchronous. When the API is called, it triggers an
        /// export job. After triggering an export job, use
        /// [GetExportToFileStatus
        /// API](/rest/api/power-bi/reports/get-export-to-file-status-in-group)
        /// to track the job status.
        /// Read more about the entire flow: [Export Power BI
        /// reports](/power-bi/developer/embedded/export-to) and [Export
        /// Paginated
        /// reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to
        /// file](/power-bi/developer/embedded/export-to#considerations-and-limitations)
        /// and [Export paginated report to
        /// file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// Export to file request parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Export>> ExportToFileInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, ExportReportRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the current status of the [Export to File In
        /// Group](/rest/api/power-bi/reports/export-to-file-in-group) job for
        /// the specified report from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// When the export job status is 'Succeeded' use the
        /// [GetFileOfExportToFile
        /// API](/rest/api/power-bi/reports/get-file-of-export-to-file-in-group)
        /// to retrieve the file.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='exportId'>
        /// The export ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Export>> GetExportToFileStatusInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, string exportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the file from the [Export to File In
        /// Group](/rest/api/power-bi/reports/export-to-file-in-group) job for
        /// the specified report from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='exportId'>
        /// The export ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Stream>> GetFileOfExportToFileInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, string exportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generates an embed token to allow report creation in the specified
        /// workspace based on the specified dataset.
        /// </summary>
        /// <remarks>
        ///
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest
        /// API, [Generate
        /// Token](/rest/api/power-bi/embed-token/generate-token). Generate
        /// token supports additional functions, such as creating a token for
        /// multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your
        /// customers](/power-bi/developer/embed-sample-for-customers)
        /// scenario. To learn more about using this API, see [Considerations
        /// when generating an embed
        /// token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to
        /// [Embed Power BI content with service
        /// principal](/power-bi/developer/embed-service-principal) and
        /// [Considerations and
        /// limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Content.Create
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live
        /// connection reports, generating an embed token with row-level
        /// security may not work for several minutes after a [Rebind
        /// Report](/rest/api/power-bi/reports/rebind-report) api call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='requestParameters'>
        /// Generate token parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EmbedToken>> GenerateTokenForCreateInGroupWithHttpMessagesAsync(System.Guid groupId, GenerateTokenRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generates an embed token to view or edit the specified report from
        /// the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest
        /// API, [Generate
        /// Token](/rest/api/power-bi/embed-token/generate-token). Generate
        /// token supports additional functions, such as creating a token for
        /// multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your
        /// customers](/power-bi/developer/embed-sample-for-customers)
        /// scenario. To learn more about using this API, see [Considerations
        /// when generating an embed
        /// token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to
        /// [Embed Power BI content with service
        /// principal](/power-bi/developer/embed-service-principal) and
        /// [Considerations and
        /// limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following, unless a requirement doesn't apply:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        /// - Content.Create, required if the `allowSaveAs` flag is specified
        /// in
        /// [GenerateTokenRequest](/rest/api/power-bi/embed-token/reports-generate-token-for-create-in-group#generatetokenrequest)
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live
        /// connection reports, generating an embed token with row-level
        /// security may not work for several minutes after a [Rebind
        /// Report](/rest/api/power-bi/reports/rebind-report).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='requestParameters'>
        /// Generate token parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EmbedToken>> GenerateTokenInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, GenerateTokenRequest requestParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Binds the specified data source of the paginated report from the
        /// specified workspace to the specified gateway, optionally with a
        /// given data source ID. If you don't supply a specific data source
        /// ID, the data source will be bound to the first matching data source
        /// in the gateway.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='rdlBindToGatewayRequest'>
        /// The bind to gateway request payload.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> BindToGatewayInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of reports from the specified workspace.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// - The user must have administrator rights (such as Office 365
        /// Global Administrator or Power BI Service Administrator) or
        /// authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must
        /// not** have any admin-consent required premissions for Power BI set
        /// on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin
        /// access token. Must not be present when authentication via a service
        /// principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='filter'>
        /// Returns a subset of a results based on
        /// [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions)
        /// filter query parameter condition.
        /// </param>
        /// <param name='top'>
        /// Returns only the first n results
        /// </param>
        /// <param name='skip'>
        /// Skips the first n results
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<AdminReports>> GetReportsInGroupAsAdminWithHttpMessagesAsync(System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of reports for the organization.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// - The user must have administrator rights (such as Office 365
        /// Global Administrator or Power BI Service Administrator) or
        /// authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must
        /// not** have any admin-consent required premissions for Power BI set
        /// on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin
        /// access token. Must not be present when authentication via a service
        /// principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='filter'>
        /// Returns a subset of a results based on
        /// [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions)
        /// filter query parameter condition.
        /// </param>
        /// <param name='top'>
        /// Returns only the first n results
        /// </param>
        /// <param name='skip'>
        /// Skips the first n results
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<AdminReports>> GetReportsAsAdminWithHttpMessagesAsync(string filter = default(string), int? top = default(int?), int? skip = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of users that have access to the specified report.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// - The user must have administrator rights (such as Office 365
        /// Global Administrator or Power BI Service Administrator) or
        /// authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must
        /// not** have any admin-consent required premissions for Power BI set
        /// on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin
        /// access token. Must not be present when authentication via a service
        /// principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ReportUsers>> GetReportUsersAsAdminWithHttpMessagesAsync(System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of report subscriptions along with subscriber
        /// details. This is a preview API call.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// - The user must have administrator rights (such as Office 365
        /// Global Administrator or Power BI Service Administrator) or
        /// authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<Subscriptions>> GetReportSubscriptionsAsAdminWithHttpMessagesAsync(System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Transfers ownership of the data sources for the specified paginated
        /// report (RDL) to the current authorized user.
        /// </summary>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For
        /// more information see: [Service principal profiles in Power BI
        /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports paginated reports.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <param name='groupId'>
        /// The workspace ID
        /// </param>
        /// <param name='reportId'>
        /// The report ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> TakeOverInGroupWithHttpMessagesAsync(System.Guid groupId, System.Guid reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
