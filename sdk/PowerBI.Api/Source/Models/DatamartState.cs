// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for DatamartState.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(DatamartStateConverter))]
    public struct DatamartState : System.IEquatable<DatamartState>
    {
        private DatamartState(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The datamart has invalid state
        /// </summary>
        public static readonly DatamartState Invalid = "Invalid";

        /// <summary>
        /// The datamart was initialized
        /// </summary>
        public static readonly DatamartState Initialized = "Initialized";

        /// <summary>
        /// The datamart is active
        /// </summary>
        public static readonly DatamartState Active = "Active";

        /// <summary>
        /// The datamart is migrating
        /// </summary>
        public static readonly DatamartState Migrating = "Migrating";

        /// <summary>
        /// The datamart was evicted
        /// </summary>
        public static readonly DatamartState Evicted = "Evicted";

        /// <summary>
        /// The datamart was deleted
        /// </summary>
        public static readonly DatamartState Deleted = "Deleted";


        /// <summary>
        /// Underlying value of enum DatamartState
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for DatamartState
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type DatamartState
        /// </summary>
        public bool Equals(DatamartState e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to DatamartState
        /// </summary>
        public static implicit operator DatamartState(string value)
        {
            return new DatamartState(value);
        }

        /// <summary>
        /// Implicit operator to convert DatamartState to string
        /// </summary>
        public static implicit operator string(DatamartState e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum DatamartState
        /// </summary>
        public static bool operator == (DatamartState e1, DatamartState e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum DatamartState
        /// </summary>
        public static bool operator != (DatamartState e1, DatamartState e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for DatamartState
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is DatamartState && Equals((DatamartState)obj);
        }

        /// <summary>
        /// Returns for hashCode DatamartState
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
