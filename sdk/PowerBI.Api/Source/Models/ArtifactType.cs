// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ArtifactType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ArtifactTypeConverter))]
    public struct ArtifactType : System.IEquatable<ArtifactType>
    {
        private ArtifactType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Power BI Report
        /// </summary>
        public static readonly ArtifactType Report = "Report";

        /// <summary>
        /// Power BI Paginated Report
        /// </summary>
        public static readonly ArtifactType PaginatedReport = "PaginatedReport";

        /// <summary>
        /// Power BI Dashboard
        /// </summary>
        public static readonly ArtifactType Dashboard = "Dashboard";

        /// <summary>
        /// Power BI Dataset
        /// </summary>
        public static readonly ArtifactType Dataset = "Dataset";

        /// <summary>
        /// Power BI Dataflow
        /// </summary>
        public static readonly ArtifactType Dataflow = "Dataflow";

        /// <summary>
        /// My workspace object
        /// </summary>
        public static readonly ArtifactType PersonalGroup = "PersonalGroup";

        /// <summary>
        /// V1 shared workspace object
        /// </summary>
        public static readonly ArtifactType Group = "Group";

        /// <summary>
        /// Shared workspace object
        /// </summary>
        public static readonly ArtifactType Workspace = "Workspace";

        /// <summary>
        /// Capacity object
        /// </summary>
        public static readonly ArtifactType Capacity = "Capacity";

        /// <summary>
        /// Power BI Apps
        /// </summary>
        public static readonly ArtifactType App = "App";


        /// <summary>
        /// Underlying value of enum ArtifactType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ArtifactType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ArtifactType
        /// </summary>
        public bool Equals(ArtifactType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ArtifactType
        /// </summary>
        public static implicit operator ArtifactType(string value)
        {
            return new ArtifactType(value);
        }

        /// <summary>
        /// Implicit operator to convert ArtifactType to string
        /// </summary>
        public static implicit operator string(ArtifactType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ArtifactType
        /// </summary>
        public static bool operator == (ArtifactType e1, ArtifactType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ArtifactType
        /// </summary>
        public static bool operator != (ArtifactType e1, ArtifactType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ArtifactType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ArtifactType && Equals((ArtifactType)obj);
        }

        /// <summary>
        /// Returns for hashCode ArtifactType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
