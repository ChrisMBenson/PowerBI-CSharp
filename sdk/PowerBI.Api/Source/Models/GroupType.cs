// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for GroupType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(GroupTypeConverter))]
    public struct GroupType : System.IEquatable<GroupType>
    {
        private GroupType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// “My workspace”, also known as personal workspace
        /// </summary>
        public static readonly GroupType PersonalGroup = "PersonalGroup";

        /// <summary>
        /// Special type of workspace meant for SharePoint list and OneDrive
        /// integration
        /// </summary>
        public static readonly GroupType Personal = "Personal";

        /// <summary>
        /// Shared workspace or simple workspace used to share content with
        /// other users in the organization
        /// </summary>
        public static readonly GroupType Workspace = "Workspace";

        /// <summary>
        /// V1 version of shared workspace. This type of workspaces will be
        /// deprecated as Microsoft migrate all workspaces to latest version of
        /// shared workspace
        /// </summary>
        public static readonly GroupType Group = "Group";


        /// <summary>
        /// Underlying value of enum GroupType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for GroupType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type GroupType
        /// </summary>
        public bool Equals(GroupType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to GroupType
        /// </summary>
        public static implicit operator GroupType(string value)
        {
            return new GroupType(value);
        }

        /// <summary>
        /// Implicit operator to convert GroupType to string
        /// </summary>
        public static implicit operator string(GroupType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum GroupType
        /// </summary>
        public static bool operator == (GroupType e1, GroupType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum GroupType
        /// </summary>
        public static bool operator != (GroupType e1, GroupType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for GroupType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is GroupType && Equals((GroupType)obj);
        }

        /// <summary>
        /// Returns for hashCode GroupType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
