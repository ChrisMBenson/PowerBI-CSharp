// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// BindDetail for each data source in a paginated report
    /// </summary>
    public partial class RdlBindDetail
    {
        /// <summary>
        /// Initializes a new instance of the RdlBindDetail class.
        /// </summary>
        public RdlBindDetail()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RdlBindDetail class.
        /// </summary>
        /// <param name="dataSourceName">Name of the data source in the
        /// paginated report</param>
        /// <param name="dataSourceObjectId">The unique identifier for the data
        /// source in the gateway</param>
        public RdlBindDetail(string dataSourceName, System.Guid? dataSourceObjectId = default(System.Guid?))
        {
            DataSourceName = dataSourceName;
            DataSourceObjectId = dataSourceObjectId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the data source in the paginated report
        /// </summary>
        [JsonProperty(PropertyName = "dataSourceName")]
        public string DataSourceName { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier for the data source in the
        /// gateway
        /// </summary>
        [JsonProperty(PropertyName = "dataSourceObjectId")]
        public System.Guid? DataSourceObjectId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DataSourceName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataSourceName");
            }
        }
    }
}
