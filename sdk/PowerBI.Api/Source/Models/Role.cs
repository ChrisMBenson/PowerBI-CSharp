// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A role in a datasetâ€™s RLS configuration
    /// </summary>
    public partial class Role
    {
        /// <summary>
        /// Initializes a new instance of the Role class.
        /// </summary>
        public Role()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Role class.
        /// </summary>
        /// <param name="name">The name of the role</param>
        /// <param name="modelPermission">The permissions that the role has on
        /// the dataset. For example, Read</param>
        /// <param name="members">An array listing the members of the
        /// role</param>
        /// <param name="tablePermissions">An array that lists all the filters
        /// defined for the role</param>
        public Role(string name, string modelPermission = default(string), RoleMember members = default(RoleMember), RoleTablePermission tablePermissions = default(RoleTablePermission))
        {
            Name = name;
            ModelPermission = modelPermission;
            Members = members;
            TablePermissions = tablePermissions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the role
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the permissions that the role has on the dataset. For
        /// example, Read
        /// </summary>
        [JsonProperty(PropertyName = "modelPermission")]
        public string ModelPermission { get; set; }

        /// <summary>
        /// Gets or sets an array listing the members of the role
        /// </summary>
        [JsonProperty(PropertyName = "members")]
        public RoleMember Members { get; set; }

        /// <summary>
        /// Gets or sets an array that lists all the filters defined for the
        /// role
        /// </summary>
        [JsonProperty(PropertyName = "tablePermissions")]
        public RoleTablePermission TablePermissions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Members != null)
            {
                Members.Validate();
            }
            if (TablePermissions != null)
            {
                TablePermissions.Validate();
            }
        }
    }
}
