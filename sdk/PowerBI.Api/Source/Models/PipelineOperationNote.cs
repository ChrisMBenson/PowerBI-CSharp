// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A note describing the deployment.
    /// </summary>
    public partial class PipelineOperationNote
    {
        /// <summary>
        /// Initializes a new instance of the PipelineOperationNote class.
        /// </summary>
        public PipelineOperationNote()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PipelineOperationNote class.
        /// </summary>
        /// <param name="content">Text describing the deployment.</param>
        /// <param name="isTruncated">Indicates if the note is incomplete.
        /// True, only part of the note is returned. False, the note is
        /// complete.</param>
        public PipelineOperationNote(string content, bool isTruncated)
        {
            Content = content;
            IsTruncated = isTruncated;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets text describing the deployment.
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets indicates if the note is incomplete. True, only part
        /// of the note is returned. False, the note is complete.
        /// </summary>
        [JsonProperty(PropertyName = "isTruncated")]
        public bool IsTruncated { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Content == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Content");
            }
        }
    }
}
